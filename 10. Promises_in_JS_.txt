                     //---------------- Promises in JS -----------------//



--> In JavaScript, a Promise is an object that represents the eventual completion or 
    failure of an asynchronous operation and its resulting value. Promises are a way to 
    handle asynchronous operations more easily and with cleaner syntax compared to traditional   
    callback-based approaches.


--> A Promise can be in one of three states:

    1. Pending: The initial state; the promise is neither fulfilled nor rejected.

    2. Fulfilled: The operation completed successfully, and the promise has a resulting value.

    3. Rejected: The operation failed, and the promise has a reason for the failure.


--> Basic Syntax :
              
           const myPromise = new Promise((resolve, reject) => {
               // Asynchronous operation
              // If successful, call resolve(value)
             // If an error occurs, call reject(reason)
           });

         myPromise.then(

           (result) => {
           // Handle the fulfilled state
           console.log(result);
           },

          (error) => {
           // Handle the rejected state
              console.error(error);
           }
        );


 Key Concepts and Relationships :

 1. Asynchronous Operations:
    - Promises are particularly useful for handling asynchronous code, such as making   
      network requests, reading files, or executing other time-consuming tasks.
 
 2. Chaining:
    - Promises support chaining, where multiple asynchronous operations can be sequenced 
      one after the other. This is achieved using the .then method.

     eg: 
          asyncOperation()
            .then(result1 => {
                // Do something with result1
             return anotherAsyncOperation(result1);
           })

            .then(result2 => {
               // Do something with result2
            })
  
           .catch(error => {
              // Handle any errors in the chain
           });


3. Error Handling:
   - The .catch method is used to handle errors in the promise chain. It catches 
     errors from any preceding asynchronous operation.
   eg:
        asyncOperation()
          .then(result => {
            // Do something with result
        })
        
        .catch(error => {
           // Handle errors in the chain
        });


4. Promise.all:
   - The Promise.all method is used to wait for multiple promises to complete. 
     It returns a single promise that is fulfilled with an array of the results.
  eg:
     const promises = [asyncOperation1(), asyncOperation2(), asyncOperation3()];

     Promise.all(promises)
       .then(results => {
          // Handle the array of results
     })
     .catch(error => {
          // Handle any errors in any of the promises
     });


5. Promise.race:
   - The Promise.race method is used to wait for the first promise in an array 
     to either fulfill or reject.
  eg : 
       const promises = [asyncOperation1(), asyncOperation2(), asyncOperation3()];

       Promise.race(promises)
         .then(result => {
               // Handle the first result (fulfilled or rejected)
         })
         .catch(error => {
              // Handle any errors in the first promise to reject
         });


6. Async/Await:
   - The async and await syntax provides a more concise way to work with promises, 
     making  asynchronous code look and behave more like synchronous code.

    async function myFunction() {
       try {
            const result = await asyncOperation();
             // Do something with the result
       } catch (error) {
           // Handle errors
       }
      }


 Overall :
         Promises play a crucial role in modern JavaScript for handling asynchronous   
         operations in a more readable and maintainable manner. They simplify error handling,  
         enable better organization of asynchronous code, and provide powerful tools for   
         composing and orchestrating complex asynchronous workflows.


